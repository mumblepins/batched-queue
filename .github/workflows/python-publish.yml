name: Python Publish

on: [push, pull_request]

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: "same_content_newer"
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule", "release"]'

  test:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' || contains(github.ref, 'refs/tags/v')}}

    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os:
          - "ubuntu-latest"
    #          - "windows-latest"
    #          - "macos-13"
    #          - "macos-14"
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v4
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-
            ${{ runner.os }}-
      - name: install dependencies
        run: |
          poetry install --sync
      - name: run pre-commit
        uses: pre-commit/action@main
        env:
          SKIP: pyright
      - name: run pyright
        uses: jakebailey/pyright-action@v2
      - name: run tests
        run: >-
          poetry run pytest
          -n 16
          --dist worksteal
          --verbose
          --cov
          --cov-report=html --cov-report=term --cov-report=xml
          --junitxml=junit.xml
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          env_vars: OS,PYTHON
          token: ${{ secrets.CODECOV_TOKEN }}
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs:
      - pre_job
      - test
    strategy:
      matrix:
        os:
          - ubuntu-latest
    #          - windows-latest
    #          - macos-13
    #          - macos-14

    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.20.0
        env:
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.10"
          CIBW_ARCHS_LINUX: auto aarch64
          #          CIBW_FREE_THREADED_SUPPORT: 1
          CIBW_SKIP: "*t-win* *musl*"
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    needs:
      - pre_job
      - test
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run --spec build pyproject-build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz
  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true
      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
#  deploy:
#    needs:
#      - pre_job
#      - test
#    if: ${{ needs.pre_job.outputs.should_skip != 'true' || startsWith(github.ref, 'refs/tags/v') }}
#    strategy:
#      fail-fast: true
#      matrix:
#        python-version: [ "3.10", "3.11", "3.12" ]
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up Python
#        uses: actions/setup-python@v5
#        with:
#          python-version: ${{ matrix.python-version }}
#      - uses: actions/cache@v4
#        id: cache-pip
#        with:
#          path: ~/.cache/pip
#          key: ${{ matrix.os }}-${{ matrix.python-version }}
#          restore-keys: |
#            ${{ matrix.os }}-
#      - run: pip install --upgrade --pre poetry
#      - uses: actions/cache@v4
#        id: cache-poetry
#        with:
#          path: ~/.cache/pypoetry/virtualenvs
#          key: ${{ matrix.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock') }}
#          restore-keys: |
#            ${{ matrix.os }}-${{ matrix.python-version }}-poetry-
#            ${{ matrix.os }}-
#      - name: install dependencies
#        run: |
#          poetry install --sync
#
#      - name: build
#        run: |
#          poetry build
#          echo $GITHUB_REF
#      - name: upload pkgs
#        uses: actions/upload-artifact@v4
#        with:
#          name: release-dists
#          path: dist/
#      - name: publish
#        if: contains(github.ref, 'refs/tags/v')
#        env:
#          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
#        run: |
#          poetry publish || poetry publish
